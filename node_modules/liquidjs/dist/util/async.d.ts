declare type resolver = (x?: any) => any;
export interface Thenable<T> {
    then(resolve: resolver, reject?: resolver): Thenable<T>;
    catch(reject: resolver): Thenable<T>;
}
export declare function toPromise<T>(val: Generator<unknown, T, unknown> | Thenable<T> | T): Promise<T>;
export declare function toValue<T>(val: Generator<unknown, T, unknown> | T): T;
export declare const toThenable: typeof toPromise;
export {};
